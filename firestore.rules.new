rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for validation and authentication
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isFriend(userId) {
      return exists(/databases/$(database)/documents/friendships/$(request.auth.uid + '_' + userId)) ||
             exists(/databases/$(database)/documents/friendships/$(userId + '_' + request.auth.uid));
    }
    
    function isGroupMember(groupId) {
      return exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));
    }
    
    function isGroupHost(groupId) {
      return exists(/databases/$(database)/documents/groups/$(groupId)) &&
             get(/databases/$(database)/documents/groups/$(groupId)).data.host_id == request.auth.uid;
    }
    
    function hasValidUserData() {
      let data = request.resource.data;
      return data.keys().hasAll(['email', 'created_at']) &&
             data.email is string &&
             data.email.size() > 0 &&
             data.created_at != null &&
             (!('display_name' in data) || data.display_name is string) &&
             (!('username' in data) || (data.username is string && data.username.size() <= 50));
    }
    
    function hasValidTaskData() {
      let data = request.resource.data;
      return data.keys().hasAll(['title', 'completed', 'created_at', 'user_id']) &&
             data.title is string &&
             data.title.size() > 0 &&
             data.title.size() <= 200 &&
             data.completed is bool &&
             data.user_id == request.auth.uid &&
             data.created_at != null &&
             (!('description' in data) || 
              (data.description is string && data.description.size() <= 500)) &&
             (!('group_id' in data) || data.group_id is string) &&
             (!('priority' in data) || data.priority in ['low', 'medium', 'high']) &&
             (!('updated_at' in data) || data.updated_at != null);
    }
    
    function hasValidGroupData() {
      let data = request.resource.data;
      return data.keys().hasAll(['name', 'host_id', 'created_at']) &&
             data.name is string &&
             data.name.size() > 0 &&
             data.name.size() <= 100 &&
             data.host_id == request.auth.uid &&
             data.created_at != null &&
             (!('description' in data) || 
              (data.description is string && data.description.size() <= 500)) &&
             (!('invite_code' in data) || 
              (data.invite_code is string && data.invite_code.size() == 8)) &&
             (!('is_private' in data) || data.is_private is bool);
    }
    
    function isValidDate(dateString) {
      return dateString is string && 
             dateString.matches('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
    }
    
    // Users collection - user profiles
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isFriend(userId));
      allow create: if isAuthenticated() && 
                       isOwner(userId) && 
                       hasValidUserData();
      allow update: if isAuthenticated() && 
                       isOwner(userId) && 
                       hasValidUserData() &&
                       // Prevent changing email after creation
                       request.resource.data.email == resource.data.email;
      allow delete: if false; // Users cannot be deleted
      
      // User's daily tasks subcollection
      match /daily_tasks/{date}/tasks/{taskId} {
        allow read: if isAuthenticated() && (isOwner(userId) || isFriend(userId));
        allow create: if isAuthenticated() && 
                         isOwner(userId) && 
                         hasValidTaskData() &&
                         isValidDate(date);
        allow update: if isAuthenticated() && 
                         isOwner(userId) && 
                         hasValidTaskData() &&
                         isValidDate(date) &&
                         request.resource.data.user_id == resource.data.user_id &&
                         request.resource.data.created_at == resource.data.created_at;
        allow delete: if isAuthenticated() && 
                         isOwner(userId) &&
                         isValidDate(date);
      }
      
      // User's task history subcollection
      match /history/{historyDate} {
        allow read: if isAuthenticated() && (isOwner(userId) || isFriend(userId));
        allow create: if isAuthenticated() && 
                         isOwner(userId) &&
                         historyDate == request.resource.data.date;
        allow update: if isAuthenticated() && 
                         isOwner(userId) &&
                         historyDate == request.resource.data.date;
        allow delete: if false; // History entries should not be deleted
      }
    }
    
    // Friend requests collection
    match /friend_requests/{requestId} {
      allow read: if isAuthenticated() && (
        resource.data.from_user_id == request.auth.uid ||
        resource.data.to_user_id == request.auth.uid
      );
      allow create: if isAuthenticated() && 
                       request.resource.data.from_user_id == request.auth.uid &&
                       request.resource.data.to_user_id != request.auth.uid &&
                       request.resource.data.status == 'pending';
      allow update: if isAuthenticated() && 
                       resource.data.to_user_id == request.auth.uid &&
                       request.resource.data.status in ['accepted', 'rejected'];
      allow delete: if isAuthenticated() && (
        resource.data.from_user_id == request.auth.uid ||
        resource.data.to_user_id == request.auth.uid
      );
    }
    
    // Friendships collection
    match /friendships/{friendshipId} {
      allow read: if isAuthenticated() && (
        friendshipId.matches('^' + request.auth.uid + '_.*') ||
        friendshipId.matches('.*_' + request.auth.uid + '$')
      );
      allow create: if isAuthenticated() && (
        friendshipId == request.auth.uid + '_' + request.resource.data.friend_id ||
        friendshipId == request.resource.data.friend_id + '_' + request.auth.uid
      );
      allow delete: if isAuthenticated() && (
        friendshipId.matches('^' + request.auth.uid + '_.*') ||
        friendshipId.matches('.*_' + request.auth.uid + '$')
      );
    }
    
    // Groups collection
    match /groups/{groupId} {
      allow read: if isAuthenticated() && isGroupMember(groupId);
      allow create: if isAuthenticated() && hasValidGroupData();
      allow update: if isAuthenticated() && isGroupHost(groupId) && hasValidGroupData();
      allow delete: if isAuthenticated() && isGroupHost(groupId);
      
      // Group members subcollection
      match /members/{memberId} {
        allow read: if isAuthenticated() && isGroupMember(groupId);
        allow create: if isAuthenticated() && (
          isGroupHost(groupId) || 
          (memberId == request.auth.uid && request.resource.data.role == 'member')
        );
        allow update: if isAuthenticated() && isGroupHost(groupId);
        allow delete: if isAuthenticated() && (
          isGroupHost(groupId) || memberId == request.auth.uid
        );
      }
      
      // Group tasks subcollection
      match /tasks/{taskId} {
        allow read: if isAuthenticated() && isGroupMember(groupId);
        allow create: if isAuthenticated() && (
          isGroupHost(groupId) && request.resource.data.created_by == request.auth.uid
        );
        allow update: if isAuthenticated() && isGroupHost(groupId);
        allow delete: if isAuthenticated() && isGroupHost(groupId);
      }
      
      // Group messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && isGroupMember(groupId);
        allow create: if isAuthenticated() && 
                         isGroupMember(groupId) &&
                         request.resource.data.user_id == request.auth.uid;
        allow delete: if isAuthenticated() && (
          isGroupHost(groupId) || 
          request.resource.data.user_id == request.auth.uid
        );
      }
    }
    
    // Motivational notes collection (now supports friends and group members)
    match /motivational_notes/{noteId} {
      allow read: if isAuthenticated() && (
        resource.data.from_user_id == request.auth.uid ||
        resource.data.to_user_id == request.auth.uid
      );
      allow create: if isAuthenticated() && 
                       request.resource.data.from_user_id == request.auth.uid &&
                       request.resource.data.to_user_id != request.auth.uid &&
                       (isFriend(request.resource.data.to_user_id) || 
                        (request.resource.data.group_id != null && 
                         isGroupMember(request.resource.data.group_id)));
      allow update: if isAuthenticated() && 
                       resource.data.to_user_id == request.auth.uid &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
      allow delete: if isAuthenticated() && (
        resource.data.from_user_id == request.auth.uid ||
        resource.data.to_user_id == request.auth.uid
      );
    }
    
    // Admin collection (for system operations)
    match /admin/{document} {
      allow read, write: if false; // No direct access - only via server functions
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
