rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for validation and authentication
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isPartner(userId) {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.partner_id == userId;
    }
    
    function isOwnerOrPartner(userId) {
      return isOwner(userId) || isPartner(userId);
    }
    
    function hasValidUserData() {
      let data = request.resource.data;
      return data.keys().hasAll(['email', 'created_at']) &&
             data.email is string &&
             data.email.size() > 0 &&
             data.created_at != null &&
             (!('display_name' in data) || data.display_name is string) &&
             (!('partner_id' in data) || data.partner_id is string);
    }
    
    function hasValidTaskData() {
      let data = request.resource.data;
      return data.keys().hasAll(['title', 'completed', 'created_at', 'user_id']) &&
             data.title is string &&
             data.title.size() > 0 &&
             data.title.size() <= 200 &&
             data.completed is bool &&
             data.user_id == request.auth.uid &&
             data.created_at != null &&
             (!('description' in data) || 
              (data.description is string && data.description.size() <= 500)) &&
             (!('updated_at' in data) || data.updated_at != null);
    }
    
    function hasValidHistoryData() {
      let data = request.resource.data;
      return data.keys().hasAll(['date', 'total_tasks', 'completed_tasks', 'completion_percentage', 'created_at']) &&
             data.date is string &&
             data.date.matches('^[0-9]{4}-[0-9]{2}-[0-9]{2}$') &&
             data.total_tasks is int &&
             data.total_tasks >= 0 &&
             data.completed_tasks is int &&
             data.completed_tasks >= 0 &&
             data.completed_tasks <= data.total_tasks &&
             data.completion_percentage is number &&
             data.completion_percentage >= 0 &&
             data.completion_percentage <= 100 &&
             data.created_at != null;
    }
    
    function hasValidNoteData() {
      let data = request.resource.data;
      return data.keys().hasAll(['from_user_id', 'to_user_id', 'message', 'created_at']) &&
             data.from_user_id == request.auth.uid &&
             data.to_user_id is string &&
             data.to_user_id != request.auth.uid &&
             data.message is string &&
             data.message.size() > 0 &&
             data.message.size() <= 500 &&
             data.created_at != null &&
             (!('read' in data) || data.read is bool);
    }
    
    function isValidDate(dateString) {
      return dateString is string && 
             dateString.matches('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
    }
    
    // Users collection - user profiles and partner relationships
    match /users/{userId} {
      allow read: if isAuthenticated() && isOwnerOrPartner(userId);
      allow create: if isAuthenticated() && 
                       isOwner(userId) && 
                       hasValidUserData();
      allow update: if isAuthenticated() && 
                       isOwner(userId) && 
                       hasValidUserData() &&
                       // Prevent changing email after creation
                       request.resource.data.email == resource.data.email;
      allow delete: if false; // Users cannot be deleted
      
      // User's daily tasks subcollection
      match /daily_tasks/{date}/tasks/{taskId} {
        allow read: if isAuthenticated() && isOwnerOrPartner(userId);
        allow create: if isAuthenticated() && 
                         isOwner(userId) && 
                         hasValidTaskData() &&
                         isValidDate(date);
        allow update: if isAuthenticated() && 
                         isOwner(userId) && 
                         hasValidTaskData() &&
                         isValidDate(date) &&
                         // Ensure user_id cannot be changed
                         request.resource.data.user_id == resource.data.user_id &&
                         request.resource.data.created_at == resource.data.created_at;
        allow delete: if isAuthenticated() && 
                         isOwner(userId) &&
                         isValidDate(date);
      }
      
      // User's task history subcollection
      match /history/{historyDate} {
        allow read: if isAuthenticated() && isOwnerOrPartner(userId);
        allow create: if isAuthenticated() && 
                         isOwner(userId) && 
                         hasValidHistoryData() &&
                         historyDate == request.resource.data.date;
        allow update: if isAuthenticated() && 
                         isOwner(userId) && 
                         hasValidHistoryData() &&
                         historyDate == request.resource.data.date &&
                         // Ensure date cannot be changed
                         request.resource.data.date == resource.data.date;
        allow delete: if false; // History entries should not be deleted
      }
    }
    
    // Motivational notes collection
    match /motivational_notes/{noteId} {
      allow read: if isAuthenticated() && (
        // Users can read notes they sent
        resource.data.from_user_id == request.auth.uid ||
        // Users can read notes sent to them
        resource.data.to_user_id == request.auth.uid
      );
      
      allow create: if isAuthenticated() && 
                       hasValidNoteData() &&
                       // Ensure the sender can only send to their partner
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.partner_id == request.resource.data.to_user_id;
      
      allow update: if isAuthenticated() && 
                       resource.data.to_user_id == request.auth.uid &&
                       // Only allow updating the 'read' status
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']) &&
                       request.resource.data.read is bool;
      
      allow delete: if isAuthenticated() && (
        // Users can delete notes they sent
        resource.data.from_user_id == request.auth.uid ||
        // Users can delete notes sent to them
        resource.data.to_user_id == request.auth.uid
      );
    }
    
    // Admin collection (for system operations like daily resets)
    match /admin/{document} {
      allow read, write: if false; // No direct access - only via server functions
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
